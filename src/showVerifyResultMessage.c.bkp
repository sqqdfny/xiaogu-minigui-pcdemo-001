#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <minigui/common.h>
#include <minigui/minigui.h>
#include <minigui/gdi.h>
#include <minigui/window.h>
#include <minigui/control.h>
#include <mgncs/mgncs.h>

#include "guicommon.h"
#include "showVerifyResultMessage.h"
#include "mainWindow.h"


static mDialogBox* dlg;

static BITMAP bgBmp;
static BITMAP btnOkBmp[4];

static uint8_t dly_cnt;
//======================================================================================
//common function
static void set_image_info(mWidget* self, int id, PBITMAP pbmp, int align_id, int align)
{
        mImage *img;
        img = (mImage *)ncsGetChildObj(self->hwnd, id);

        if(img)
        {
                _c(img)->setProperty(img, NCSP_IMAGE_IMAGE, (DWORD)pbmp);
                _c(img)->setProperty(img, align_id, align);
        }
}
static void set_button_info(mWidget* self, int id, PBITMAP pbmp, int align_id, int align)
{
        mButton *btn;
        btn = (mButton *)ncsGetChildObj(self->hwnd, id);

        if(btn){
                _c(btn)->setProperty(btn, NCSP_BUTTON_IMAGE, (DWORD)pbmp);
                _c(btn)->setProperty(btn, align_id, align);
        }

}

//======================================================================================
//controls events
static BOOL OnOkButtonClicked (mMainWnd *self, mButton *sender, int id, DWORD param)
{
    //GuiDbgPrintf("ShowVerifyMessage OnOkButtonClicked\n");
    SendMessage (self->hwnd, MSG_CLOSE, 0, 0);
    return FALSE;
}

static BOOL RegisterCtrlHanders (mWidget* self, DWORD addData)
{
	ncsAddEventListener ((mObject*)((mButton*)_c(self)->getChild (self, IDC_NUM_SHOW_VERIFY_BTN_OK)),
                        (mObject*)self, (NCS_CB_ONOBJEVENT)OnOkButtonClicked, NCSN_WIDGET_CLICKED);

	return TRUE;
}

//======================================================================================
//windos events
static BOOL OnCreate(mWidget* self, DWORD add_data)
{//TODO : initialize
    BOOL ret = (BOOL)add_data;

    GuiDbgPrintf("ShowMessage OnCreate\n");

    SetWindowFont(GetDlgItem(self->hwnd, IDC_NUM_SHOW_VERIFY_BTN_OK), logfont_unifont_default);
    if(ret)
    {
        if (LoadBitmapFromFile(HDC_SCREEN, &bgBmp, IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BG_SUCC) != 0 )
        {
            GuiDbgPrintf("cannot load image file \"%s\"\n", IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BG_SUCC);
        }
    }
    else
    {
        if (LoadBitmapFromFile(HDC_SCREEN, &bgBmp, IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BG_FAIL) != 0 )
        {
            GuiDbgPrintf("cannot load image file \"%s\"\n", IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BG_SUCC);
        }
    }
    set_image_info(self, IDC_NUM_SHOW_VERIFY_MSG_BG_IMAGE, &bgBmp, NCSP_STATIC_ALIGN, NCS_ALIGN_CENTER);

    if (LoadBitmapFromFile(HDC_SCREEN, &btnOkBmp[0], IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_0) != 0 )
    {
        GuiDbgPrintf("cannot load image file \"%s\"\n", IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_0);
    }
    if (LoadBitmapFromFile(HDC_SCREEN, &btnOkBmp[1], IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_1) != 0 )
    {
        GuiDbgPrintf("cannot load image file \"%s\"\n", IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_1);
    }
    if (LoadBitmapFromFile(HDC_SCREEN, &btnOkBmp[2], IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_2) != 0 )
    {
        GuiDbgPrintf("cannot load image file \"%s\"\n", IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_2);
    }
    if (LoadBitmapFromFile(HDC_SCREEN, &btnOkBmp[3], IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_3) != 0 )
    {
        GuiDbgPrintf("cannot load image file \"%s\"\n", IMAGE_FILE_PATH_SHOW_VERIFY_RESULT_MSG_BTN_OK_3);
    }
    set_button_info(self, IDC_NUM_SHOW_VERIFY_BTN_OK, &btnOkBmp[3], NCSP_STATIC_ALIGN, NCS_ALIGN_CENTER);

    RegisterCtrlHanders(self, add_data);

    if(ret)
    {
        SetTimer (self->hwnd, IDC_NUM_SHOW_VERIFY_MSG_DIALOGBOX, 200);
    }
    else
    {
        dly_cnt = 3;
        ShowWindow(GetDlgItem(self->hwnd, IDC_NUM_SHOW_VERIFY_BTN_OK), SW_SHOW);
        SetTimer (self->hwnd, IDC_NUM_SHOW_VERIFY_MSG_DIALOGBOX, 100);
    }
    return NCSR_CONTINUE_MSG;
}


static void OnPaint (mWidget *self, HDC hdc, const CLIPRGN* inv)
{
    SetBkMode (hdc, BM_TRANSPARENT);
}

static BOOL OnClose(mWidget* self, int message, WPARAM wpara, LPARAM lpara)
{
    GuiDbgPrintf("ShowMessage OnClose message=%d, wpara=%lu, lpara=%lu\n", message, wpara, lpara);
    KillTimer (self->hwnd, IDC_NUM_SHOW_VERIFY_MSG_DIALOGBOX);

    UnloadBitmap(&bgBmp);
    UnloadBitmap(&btnOkBmp[0]);
    UnloadBitmap(&btnOkBmp[1]);
    UnloadBitmap(&btnOkBmp[2]);
    UnloadBitmap(&btnOkBmp[3]);

	DestroyWindow(self->hwnd);
    return NCSR_CONTINUE_MSG;
}

static void OnKillFocus(mWidget* self, int message)
{
    GuiDbgPrintf("ShowMessage OnKillFocus\n");
    SendMessage (self->hwnd, MSG_CLOSE, 0, 0);
}
static void OnTimer (mWidget *self, HDC hdc, const CLIPRGN* inv)
{
    BOOL ret =  (BOOL)GetWindowAdditionalData(self->hwnd);
    GuiDbgPrintf("Show MessageBox OnTimer %d\n", ret);

    if(ret)
    {
        SendMessage (self->hwnd, MSG_CLOSE, 0, 0);
    }
    else
    {
        if(0 == (--dly_cnt))
        {
            SendMessage (self->hwnd, MSG_CLOSE, 0, 0);
        }
        else
        {
            if(dly_cnt > 3) {dly_cnt = 3;}
            set_button_info(self, IDC_NUM_SHOW_VERIFY_BTN_OK, &btnOkBmp[dly_cnt], NCSP_STATIC_ALIGN, NCS_ALIGN_CENTER);
        }
    }
}

static NCS_EVENT_HANDLER handlers[] =
{
    {MSG_CREATE,    OnCreate    },
    {MSG_PAINT,     OnPaint     },
    {MSG_CLOSE,     OnClose     },
    {MSG_KILLFOCUS, OnKillFocus },
    {MSG_TIMER,     OnTimer     },
    {0,             NULL        }
};


static void OnOkBtnEraseBkGnd(mWidget* self, HDC hdc, const PRECT clip)
{
    GuiDbgPrintf("ShowMessage OnOkBtnEraseBkGnd %lu %lu\n", (DWORD)hdc, (DWORD)clip);
/*    HWND hwnd;
    HDC phdc;
    RECT rcTemp;
    GuiDbgPrintf("ShowMessage OnEraseBkGnd %lu %lu\n", (DWORD)hdc, (DWORD)clip);
    //rcTemp = *clip;
    //ScreenToClient (GetDlgItem(self->hwnd, IDC_NUM_SHOW_VERIFY_BTN_OK), &rcTemp.left, &rcTemp.top);
    //ScreenToClient (GetDlgItem(self->hwnd, IDC_NUM_SHOW_VERIFY_BTN_OK), &rcTemp.right, &rcTemp.bottom);
    //IncludeClipRect (hdc, &rcTemp);
    hwnd = GetDlgItem(self->hwnd, IDC_NUM_SHOW_VERIFY_BTN_OK);
    phdc = GetClientDC (hwnd);
    GetClientRect (hwnd, &rcTemp);
    FillBoxWithBitmap (hdc, 0, 0, RECTW(rcTemp), RECTH(rcTemp), &btnOkBmp[0]);
    ReleaseDC (phdc);
*/
}

static NCS_EVENT_HANDLER btnOkHandlers[] =
{
    {MSG_ERASEBKGND, OnOkBtnEraseBkGnd},
    {0,             NULL        }
};

//======================================================================================
static NCS_RDR_ELEMENT btn_rdr_elements[] =
{
    //{NCS_FGC_3DBODY , 0XFF0000FF},
    //{NCS_BGC_3DBODY , 0XFFFF0000},
    //{NCS_METRICS_3DBODY_ROUNDX, 23},
    //{NCS_METRICS_3DBODY_ROUNDY, 23},
    //{NCS_MODE_BKIMAGE, NCS_DM_NORMAL},
	//{NCS_IMAGE_BKGND , (DWORD)&btnOkBmp[0]},
	{NCS_FGC_WINDOW , 0XFF0000FF},
	//{NCSP_WIDGET_BKIMAGE  , &btnOkBmp[0]},
	{ -1, 0 }
};

static NCS_RDR_INFO btn_rdr_info[] = {
	{ "flat","flat", btn_rdr_elements }
};

static NCS_RDR_ELEMENT stc_rdr_elements[] =
{
	{NCS_FGC_WINDOW , 0XFFFFFFFF},
	{ -1, 0 }
};

static NCS_RDR_INFO static_rdr_info[] = {
	{ "flat","flat", stc_rdr_elements }
};

// START_OF_TEMPLATE
static NCS_WND_TEMPLATE _ctrl_templ[] =
{
    {
        NCSCTRL_IMAGE,
        IDC_NUM_SHOW_VERIFY_MSG_BG_IMAGE,
        0, 0, 390, 230,
        WS_VISIBLE | NCSS_BUTTON_IMAGE,
        WS_EX_TRANSPARENT,
        "",
        NULL,
        NULL, //rdr_info,
        NULL,NULL,0,0, MakeRGBA(0x00, 0x00, 0x00, 0xFF),0,0,0,0,0  //handlers,//controls //count //add data//bk_color//font_name//hIcon//hMenu//notify_info//special_id
    },
    {
        NCSCTRL_BUTTON,
        IDC_NUM_SHOW_VERIFY_BTN_OK,
        123, 175, 135, 46,
        NCSS_BUTTON_IMAGE,
        WS_EX_TRANSPARENT,
        "",
        NULL,
        btn_rdr_info,
        btnOkHandlers,NULL,0,0, MakeRGBA(0x00, 0x00, 0x00, 0xFF),0,0,0,0,0  //handlers,//controls //count //add data//bk_color//font_name//hIcon//hMenu//notify_info//special_id
    },
};

static NCS_WND_TEMPLATE mywnd_templ = {
    NCSCTRL_DIALOGBOX,
    IDC_NUM_SHOW_VERIFY_MSG_DIALOGBOX,
    45, 370, 390, 230,
    WS_VISIBLE | WS_CHILD,
    WS_EX_NONE,
    "",
    NULL,
    NULL,
    handlers,
    _ctrl_templ,
    sizeof(_ctrl_templ)/sizeof(NCS_WND_TEMPLATE),
    0,                      //user_data
    MakeRGBA(0x00, 0x00, 0x00, 0xFF),    //bk_color
    0,                      //font_name
    0,                      //hIcon
    0,                      //hMenu
    0,                      //notify_info
    0                       //special_id
};
// END_OF_TEMPLATE

mDialogBox* ShowVerifyResultMessageCreate(HWND parent_hwnd, BOOL ret)
{
    mywnd_templ.user_data = (DWORD)ret;
    dlg = (mDialogBox *)ncsCreateWindowIndirect (&mywnd_templ, parent_hwnd);
    return dlg;
}
//==============================================================================================
//end files

